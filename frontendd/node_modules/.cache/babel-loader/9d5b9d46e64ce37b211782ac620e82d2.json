{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/Bastian/Desktop/Chat_App/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";import _toConsumableArray from\"C:/Users/Bastian/Desktop/Chat_App/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _asyncToGenerator from\"C:/Users/Bastian/Desktop/Chat_App/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Users/Bastian/Desktop/Chat_App/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var _templateObject;import _regeneratorRuntime from\"C:\\\\Users\\\\Bastian\\\\Desktop\\\\Chat_App\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import React,{useState,useEffect,useRef}from'react';import styled from'styled-components';import ChatInput from'./ChatInput';import Logout from'./Logout';import Messages from'./Messages';import{getAllMessagesRoute,sendMessageRoute}from'../utils/APIRoutes';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var ChatContainer=function ChatContainer(_ref){var currentChat=_ref.currentChat,currentUser=_ref.currentUser,socket=_ref.socket;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),messages=_useState2[0],setMessages=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),arrivalMessage=_useState4[0],setArrivalMessage=_useState4[1];var scrollRef=useRef();useEffect(function(){var fetchMessages=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!currentChat){_context.next=5;break;}_context.next=3;return axios.post(getAllMessagesRoute,{form:currentUser._id,to:currentChat._id});case 3:response=_context.sent;setMessages(response.data);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchMessages(){return _ref2.apply(this,arguments);};}();fetchMessages();},[currentChat,messages]);var handleSendMsg=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(msg){var msgs;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return axios.post(sendMessageRoute,{form:currentUser._id,to:currentChat._id,message:msg});case 2:socket.current.emit(\"send-msg\",{to:currentChat._id,from:currentUser._id,message:msg});msgs=_toConsumableArray(messages);msgs.push({formSelf:true,message:msg});setMessages(msgs);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function handleSendMsg(_x){return _ref3.apply(this,arguments);};}();useEffect(function(){if(socket.current){socket.current.on(\"msg-recieve\",function(msg){setArrivalMessage({formSelf:false,message:msg});});}},[]);useEffect(function(){arrivalMessage&&setMessages(function(prev){return[].concat(_toConsumableArray(prev),[arrivalMessage]);});},[arrivalMessage]);useEffect(function(){var _scrollRef$current;(_scrollRef$current=scrollRef.current)===null||_scrollRef$current===void 0?void 0:_scrollRef$current.scrollIntoView({behavior:\"smooth\"});},[messages]);return/*#__PURE__*/_jsx(_Fragment,{children:currentChat&&/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"user-details\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"avatar\",children:/*#__PURE__*/_jsx(\"img\",{src:\"data:image/svg+xml;base64,\".concat(currentChat.avatarImage),alt:\"avatar\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"username\",children:/*#__PURE__*/_jsx(\"h3\",{children:currentChat.username})})]}),/*#__PURE__*/_jsx(Logout,{})]}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-messages\",children:messages.map(function(message){return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{className:\"message \".concat(message.formSelf?\"sended\":\"recieved\"),children:/*#__PURE__*/_jsx(\"div\",{className:\"content \",children:/*#__PURE__*/_jsx(\"p\",{children:message.message})})})});})}),/*#__PURE__*/_jsx(ChatInput,{handleSendMsg:handleSendMsg})]})});};var Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-rows: 10% 80% 10%;\\n  gap: 0.1rem;\\n  overflow: hidden;\\n  @media screen and (min-width: 720px) and (max-width: 1080px) {\\n    grid-template-rows: 15% 70% 15%;\\n  }\\n  .chat-header {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 0 2rem;\\n    .user-details {\\n      display: flex;\\n      align-items: center;\\n      gap: 1rem;\\n      .avatar {\\n        img {\\n          height: 3rem;\\n        }\\n      }\\n      .username {\\n        h3 {\\n          color: white;\\n        }\\n      }\\n    }\\n  }\\n  .chat-messages {\\n    padding: 1rem 2rem;\\n    display: flex;\\n    flex-direction: column;\\n    gap: 1rem;\\n    overflow: auto;\\n    &::-webkit-scrollbar {\\n      width: 0.2rem;\\n      &-thumb {\\n        background-color: #ffffff39;\\n        width: 0.1rem;\\n        border-radius: 1rem;\\n      }\\n    }\\n    .message {\\n      display: flex;\\n      align-items: center;\\n      .content {\\n        max-width: 40%;\\n        overflow-wrap: break-word;\\n        padding: 1rem;\\n        font-size: 1.1rem;\\n        border-radius: 1rem;\\n        color: #d1d1d1;\\n        @media screen and (min-width: 720px) and (max-width: 1080px) {\\n          max-width: 70%;\\n        }\\n      }\\n    }\\n    .sended {\\n      justify-content: flex-end;\\n      .content {\\n        background-color: #4f04ff21;\\n      }\\n    }\\n    .recieved {\\n      justify-content: flex-start;\\n      .content {\\n        background-color: #9900ff20;\\n      }\\n    }\\n  }\\n\"])));export default ChatContainer;","map":{"version":3,"sources":["C:/Users/Bastian/Desktop/Chat_App/frontend/src/components/ChatContainer.jsx"],"names":["React","useState","useEffect","useRef","styled","ChatInput","Logout","Messages","getAllMessagesRoute","sendMessageRoute","axios","ChatContainer","currentChat","currentUser","socket","messages","setMessages","arrivalMessage","setArrivalMessage","scrollRef","fetchMessages","post","form","_id","to","response","data","handleSendMsg","msg","message","current","emit","from","msgs","push","formSelf","on","prev","scrollIntoView","behavior","avatarImage","username","map","Container","div"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\r\nimport styled from 'styled-components';\r\nimport ChatInput from './ChatInput';\r\nimport Logout from './Logout';\r\nimport Messages from './Messages';\r\nimport {getAllMessagesRoute, sendMessageRoute} from '../utils/APIRoutes';\r\nimport axios from 'axios';\r\n\r\n\r\nconst ChatContainer = ({currentChat,currentUser, socket}) => {\r\n  const [messages,setMessages] = useState([]);\r\n  const [arrivalMessage, setArrivalMessage] = useState(null);\r\n  const scrollRef = useRef();\r\n\r\n  useEffect(()=>{\r\n    const fetchMessages = async()=>{\r\n      if(currentChat){\r\n        const response = await axios.post(getAllMessagesRoute,{\r\n          form: currentUser._id,\r\n          to: currentChat._id\r\n      })\r\n     setMessages(response.data)\r\n    }\r\n  }\r\n  fetchMessages();\r\n  },[currentChat, messages])\r\n\r\n    const handleSendMsg = async( msg) =>{\r\n      await axios.post(sendMessageRoute,{\r\n        form: currentUser._id,\r\n        to: currentChat._id,\r\n        message: msg\r\n      });\r\n      socket.current.emit(\"send-msg\",{\r\n        to: currentChat._id,\r\n        from: currentUser._id,\r\n        message: msg,\r\n      });\r\n      const msgs = [...messages];\r\n\r\n      msgs.push({formSelf: true, message: msg});\r\n      setMessages(msgs)\r\n    };\r\n    useEffect(() => {\r\n      if (socket.current) {\r\n        socket.current.on(\"msg-recieve\", (msg) => {\r\n          setArrivalMessage({ formSelf: false, message: msg });\r\n        });\r\n      }\r\n    }, []);\r\n    useEffect(() => {\r\n      arrivalMessage && setMessages((prev) => [...prev, arrivalMessage]);\r\n    }, [arrivalMessage]);\r\n  \r\n    useEffect(() => {\r\n      scrollRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }, [messages]);\r\n  \r\n\r\n  return (\r\n    <>\r\n    {currentChat && (\r\n        <Container>\r\n        <div className=\"chat-header\">\r\n            <div className=\"user-details\">\r\n                <div className=\"avatar\">\r\n                <img\r\n                    src={`data:image/svg+xml;base64,${currentChat.avatarImage}`}\r\n                    alt=\"avatar\"\r\n                 />\r\n                </div>\r\n                <div className=\"username\">\r\n                    <h3>{currentChat.username}</h3>\r\n                </div>\r\n            </div>\r\n            <Logout/>\r\n        </div>\r\n        <div className=\"chat-messages\">\r\n        {messages.map((message) => {\r\n          return (\r\n            <div>\r\n              <div\r\n                className={`message ${\r\n                  message.formSelf ? \"sended\" : \"recieved\"\r\n                }`}\r\n              >\r\n                <div className=\"content \">\r\n                  <p>{message.message}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n        </div>\r\n        <ChatInput handleSendMsg={handleSendMsg}/>\r\n    </Container>\r\n    )}\r\n    </>\r\n  )\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-rows: 10% 80% 10%;\r\n  gap: 0.1rem;\r\n  overflow: hidden;\r\n  @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n    grid-template-rows: 15% 70% 15%;\r\n  }\r\n  .chat-header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 0 2rem;\r\n    .user-details {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 1rem;\r\n      .avatar {\r\n        img {\r\n          height: 3rem;\r\n        }\r\n      }\r\n      .username {\r\n        h3 {\r\n          color: white;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .chat-messages {\r\n    padding: 1rem 2rem;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    overflow: auto;\r\n    &::-webkit-scrollbar {\r\n      width: 0.2rem;\r\n      &-thumb {\r\n        background-color: #ffffff39;\r\n        width: 0.1rem;\r\n        border-radius: 1rem;\r\n      }\r\n    }\r\n    .message {\r\n      display: flex;\r\n      align-items: center;\r\n      .content {\r\n        max-width: 40%;\r\n        overflow-wrap: break-word;\r\n        padding: 1rem;\r\n        font-size: 1.1rem;\r\n        border-radius: 1rem;\r\n        color: #d1d1d1;\r\n        @media screen and (min-width: 720px) and (max-width: 1080px) {\r\n          max-width: 70%;\r\n        }\r\n      }\r\n    }\r\n    .sended {\r\n      justify-content: flex-end;\r\n      .content {\r\n        background-color: #4f04ff21;\r\n      }\r\n    }\r\n    .recieved {\r\n      justify-content: flex-start;\r\n      .content {\r\n        background-color: #9900ff20;\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport default ChatContainer"]},"metadata":{},"sourceType":"module"}