{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bastian\\\\Desktop\\\\Chat_App\\\\frontend\\\\src\\\\pages\\\\SetAvatar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport loader from '../assets/loader.gif';\nimport { ToastContainer, toast } from 'react-toastify';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport axios from 'axios';\nimport { setAvatarRoute } from '../utils/APIRoutes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SetAvatar = () => {\n  _s();\n\n  const api = \"https://api.multiavatar.com/45678945\";\n  const navigate = useNavigate();\n  const [avatars, setAvatars] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedAvatar, setSelectedAvatar] = useState(undefined);\n  const toastOptions = {\n    position: \"bottom-right\",\n    autoClose: 8000,\n    pauseOnHover: true,\n    draggable: true,\n    theme: \"dark\"\n  };\n\n  const setProfilePicture = async () => {};\n\n  useEffect(() => {\n    const fetchImage = async () => {\n      const data = [];\n\n      for (let i = 0; i < 4; i++) {\n        const image = await axios.get(`${api}/${Math.round(Math.random() * 1000)}`);\n        const buffer = new Buffer(image.data);\n        data.push(buffer.toString(\"base64\"));\n      }\n\n      setAvatars(data);\n      setIsLoading(false);\n    };\n\n    fetchImage();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"title-container\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Pick an avatar as yout profile picture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatars\",\n        children: avatars.map((avatar, index) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            classname: `avatar ${selectedAvatar === index ? \"selected\" : \"\"}`,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `data:image/svg+xml;base64, ${avatar}`,\n              alt: \"avatar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 27\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 25\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SetAvatar, \"Vf3bLGWNS+p8++1hLS4MtcrCzCs=\", false, function () {\n  return [useNavigate];\n});\n\n_c = SetAvatar;\nconst Container = styled.div``;\n_c2 = Container;\nexport default SetAvatar;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SetAvatar\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["C:/Users/Bastian/Desktop/Chat_App/frontend/src/pages/SetAvatar.jsx"],"names":["React","useState","useEffect","useNavigate","styled","loader","ToastContainer","toast","axios","setAvatarRoute","SetAvatar","api","navigate","avatars","setAvatars","isLoading","setIsLoading","selectedAvatar","setSelectedAvatar","undefined","toastOptions","position","autoClose","pauseOnHover","draggable","theme","setProfilePicture","fetchImage","data","i","image","get","Math","round","random","buffer","Buffer","push","toString","map","avatar","index","Container","div"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,SAAxB,QAAwC,OAAxC;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAAQC,cAAR,EAAwBC,KAAxB,QAAoC,gBAApC;AACA,OAAO,uCAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,QAA+B,oBAA/B;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAMC,GAAG,GAAG,sCAAZ;AACA,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACgB,cAAD,EAAiBC,iBAAjB,IAAsCjB,QAAQ,CAACkB,SAAD,CAApD;AACA,QAAMC,YAAY,GAAG;AACjBC,IAAAA,QAAQ,EAAE,cADO;AAEjBC,IAAAA,SAAS,EAAE,IAFM;AAGjBC,IAAAA,YAAY,EAAE,IAHG;AAIjBC,IAAAA,SAAS,EAAE,IAJM;AAKjBC,IAAAA,KAAK,EAAE;AALU,GAArB;;AAOA,QAAMC,iBAAiB,GAAG,YAAS,CAElC,CAFD;;AAIAxB,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMyB,UAAU,GAAG,YAAS;AACxB,YAAMC,IAAI,GAAG,EAAb;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC,CAAf,EAAkBA,CAAC,EAAnB,EAAsB;AAClB,cAAMC,KAAK,GAAG,MAAMtB,KAAK,CAACuB,GAAN,CACf,GAAEpB,GAAI,IAAGqB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAc,IAAzB,CAA+B,EADzB,CAApB;AAGA,cAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAWN,KAAK,CAACF,IAAjB,CAAf;AACAA,QAAAA,IAAI,CAACS,IAAL,CAAUF,MAAM,CAACG,QAAP,CAAgB,QAAhB,CAAV;AACH;;AACDxB,MAAAA,UAAU,CAACc,IAAD,CAAV;AACAZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAXD;;AAYAW,IAAAA,UAAU;AACb,GAdQ,EAcP,EAdO,CAAT;AAgBF,sBACE;AAAA,4BACI,QAAC,SAAD;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,kBACKd,OAAO,CAAC0B,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAiB;AAC1B,8BACI;AAEC,YAAA,SAAS,EAAG,UACRxB,cAAc,KAAKwB,KAAnB,GAA2B,UAA3B,GAAwC,EAC3C,EAJF;AAAA,mCAME;AACC,cAAA,GAAG,EAAG,8BAA6BD,MAAO,EAD3C;AAEC,cAAA,GAAG,EAAC;AAFL;AAAA;AAAA;AAAA;AAAA;AANF,aACMC,KADN;AAAA;AAAA;AAAA;AAAA,kBADJ;AAaH,SAdA;AADL;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAwBI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,YAxBJ;AAAA,kBADF;AA4BD,CA7DD;;GAAM/B,S;UAEeP,W;;;KAFfO,S;AA8DN,MAAMgC,SAAS,GAAGtC,MAAM,CAACuC,GAAI,EAA7B;MAAMD,S;AACN,eAAehC,SAAf","sourcesContent":["import React,{useState, useEffect} from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport loader from '../assets/loader.gif';\r\nimport {ToastContainer, toast} from 'react-toastify';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport axios from 'axios';\r\nimport { setAvatarRoute } from '../utils/APIRoutes';\r\n\r\nconst SetAvatar = () => {\r\n    const api = \"https://api.multiavatar.com/45678945\";\r\n    const navigate = useNavigate();\r\n    const [avatars, setAvatars] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [selectedAvatar, setSelectedAvatar] = useState(undefined);\r\n    const toastOptions = {\r\n        position: \"bottom-right\",\r\n        autoClose: 8000,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        theme: \"dark\"\r\n    };\r\n    const setProfilePicture = async()=>{\r\n\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const fetchImage = async()=>{\r\n            const data = [];\r\n            for(let i=0; i<4; i++){\r\n                const image = await axios.get(\r\n                    `${api}/${Math.round(Math.random()*1000)}`\r\n                );\r\n                const buffer = new Buffer(image.data);\r\n                data.push(buffer.toString(\"base64\"))\r\n            }\r\n            setAvatars(data);\r\n            setIsLoading(false);\r\n        }\r\n        fetchImage();\r\n    },[])\r\n\r\n  return (\r\n    <>\r\n        <Container>\r\n            <div className=\"title-container\">\r\n                <h1>Pick an avatar as yout profile picture</h1>\r\n            </div>\r\n            <div className=\"avatars\">\r\n                {avatars.map((avatar, index)=>{\r\n                    return(\r\n                        <div\r\n                         key={index}\r\n                         classname={`avatar ${\r\n                             selectedAvatar === index ? \"selected\" : \"\"\r\n                         }`}\r\n                        >\r\n                          <img\r\n                           src={`data:image/svg+xml;base64, ${avatar}`}\r\n                           alt=\"avatar\"\r\n                          />  \r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n        </Container>\r\n        <ToastContainer/>\r\n    </>\r\n  )\r\n}\r\nconst Container = styled.div``;\r\nexport default SetAvatar"]},"metadata":{},"sourceType":"module"}